// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transfer.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CHANGE FROM PRIOR VERSION, modes should be considered individually as a mask and do not imply other modes
type ProvideMode int32

const (
	ProvideMode_None             ProvideMode = 0 // this is interpreted the same as a `null` provide mode
	ProvideMode_Network          ProvideMode = 1
	ProvideMode_FriendsAndFamily ProvideMode = 2
	ProvideMode_Public           ProvideMode = 3
	ProvideMode_Stream           ProvideMode = 4
	ProvideMode_PublicStream     ProvideMode = 5
)

// Enum value maps for ProvideMode.
var (
	ProvideMode_name = map[int32]string{
		0: "None",
		1: "Network",
		2: "FriendsAndFamily",
		3: "Public",
		4: "Stream",
		5: "PublicStream",
	}
	ProvideMode_value = map[string]int32{
		"None":             0,
		"Network":          1,
		"FriendsAndFamily": 2,
		"Public":           3,
		"Stream":           4,
		"PublicStream":     5,
	}
)

func (x ProvideMode) Enum() *ProvideMode {
	p := new(ProvideMode)
	*p = x
	return p
}

func (x ProvideMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvideMode) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[0].Descriptor()
}

func (ProvideMode) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[0]
}

func (x ProvideMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvideMode.Descriptor instead.
func (ProvideMode) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{0}
}

type ContractError int32

const (
	ContractError_NoPermission        ContractError = 0
	ContractError_InsufficientBalance ContractError = 1
	ContractError_Setup               ContractError = 2
	ContractError_Trust               ContractError = 3
	ContractError_Invalid             ContractError = 4
)

// Enum value maps for ContractError.
var (
	ContractError_name = map[int32]string{
		0: "NoPermission",
		1: "InsufficientBalance",
		2: "Setup",
		3: "Trust",
		4: "Invalid",
	}
	ContractError_value = map[string]int32{
		"NoPermission":        0,
		"InsufficientBalance": 1,
		"Setup":               2,
		"Trust":               3,
		"Invalid":             4,
	}
)

func (x ContractError) Enum() *ContractError {
	p := new(ContractError)
	*p = x
	return p
}

func (x ContractError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractError) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[1].Descriptor()
}

func (ContractError) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[1]
}

func (x ContractError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractError.Descriptor instead.
func (ContractError) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{1}
}

// stream_id replaces the source_id and destination_id
type TransferPath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	SourceId []byte `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3,oneof" json:"source_id,omitempty"`
	// ulid
	DestinationId []byte `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	// ulid
	StreamId      []byte `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferPath) Reset() {
	*x = TransferPath{}
	mi := &file_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPath) ProtoMessage() {}

func (x *TransferPath) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPath.ProtoReflect.Descriptor instead.
func (*TransferPath) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *TransferPath) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *TransferPath) GetDestinationId() []byte {
	if x != nil {
		return x.DestinationId
	}
	return nil
}

func (x *TransferPath) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type TransferFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferPath  *TransferPath          `protobuf:"bytes,1,opt,name=transfer_path,json=transferPath,proto3" json:"transfer_path,omitempty"`
	Frame         *Frame                 `protobuf:"bytes,2,opt,name=frame,proto3,oneof" json:"frame,omitempty"`
	MessageType   *MessageType           `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3,enum=bringyour.MessageType,oneof" json:"message_type,omitempty"`
	Pack          *Pack                  `protobuf:"bytes,4,opt,name=pack,proto3,oneof" json:"pack,omitempty"`
	Ack           *Ack                   `protobuf:"bytes,5,opt,name=ack,proto3,oneof" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferFrame) Reset() {
	*x = TransferFrame{}
	mi := &file_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFrame) ProtoMessage() {}

func (x *TransferFrame) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFrame.ProtoReflect.Descriptor instead.
func (*TransferFrame) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *TransferFrame) GetTransferPath() *TransferPath {
	if x != nil {
		return x.TransferPath
	}
	return nil
}

func (x *TransferFrame) GetFrame() *Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *TransferFrame) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_TransferPack
}

func (x *TransferFrame) GetPack() *Pack {
	if x != nil {
		return x.Pack
	}
	return nil
}

func (x *TransferFrame) GetAck() *Ack {
	if x != nil {
		return x.Ack
	}
	return nil
}

// this is the minimal subset of `TransferFrame` used when making a routing decision
type FilteredTransferFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferPath  *TransferPath          `protobuf:"bytes,1,opt,name=transfer_path,json=transferPath,proto3" json:"transfer_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilteredTransferFrame) Reset() {
	*x = FilteredTransferFrame{}
	mi := &file_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilteredTransferFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredTransferFrame) ProtoMessage() {}

func (x *FilteredTransferFrame) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredTransferFrame.ProtoReflect.Descriptor instead.
func (*FilteredTransferFrame) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *FilteredTransferFrame) GetTransferPath() *TransferPath {
	if x != nil {
		return x.TransferPath
	}
	return nil
}

type FilteredTransferFrameWithFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferPath  *TransferPath          `protobuf:"bytes,1,opt,name=transfer_path,json=transferPath,proto3" json:"transfer_path,omitempty"`
	Frame         *FilteredFrame         `protobuf:"bytes,2,opt,name=frame,proto3,oneof" json:"frame,omitempty"`
	MessageType   *MessageType           `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3,enum=bringyour.MessageType,oneof" json:"message_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilteredTransferFrameWithFrame) Reset() {
	*x = FilteredTransferFrameWithFrame{}
	mi := &file_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilteredTransferFrameWithFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredTransferFrameWithFrame) ProtoMessage() {}

func (x *FilteredTransferFrameWithFrame) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredTransferFrameWithFrame.ProtoReflect.Descriptor instead.
func (*FilteredTransferFrameWithFrame) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *FilteredTransferFrameWithFrame) GetTransferPath() *TransferPath {
	if x != nil {
		return x.TransferPath
	}
	return nil
}

func (x *FilteredTransferFrameWithFrame) GetFrame() *FilteredFrame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *FilteredTransferFrameWithFrame) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_TransferPack
}

type Pack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// ulid
	SequenceId     []byte `protobuf:"bytes,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// this marks the head message in the sender's sequence
	// it means that any message with an earlier sequence_id won't arrive
	// and is used when a receiver is recreated with zero state
	Head   bool     `protobuf:"varint,4,opt,name=head,proto3" json:"head,omitempty"`
	Frames []*Frame `protobuf:"bytes,5,rep,name=frames,proto3" json:"frames,omitempty"`
	// when true, deliver out of sequence with no acks and no retry
	// use true when there is an external transfer control
	// default to false for backward compatibility
	Nack          bool   `protobuf:"varint,6,opt,name=nack,proto3" json:"nack,omitempty"`
	ContractFrame *Frame `protobuf:"bytes,7,opt,name=contract_frame,json=contractFrame,proto3,oneof" json:"contract_frame,omitempty"`
	// this is threaded back by the `Ack`
	// so that the client can compute a single message rtt
	Tag *Tag `protobuf:"bytes,8,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	// contract_id lock
	// this is required for nack messages. There is no need to set this for ack messages.
	// ulid
	ContractId    []byte `protobuf:"bytes,9,opt,name=contract_id,json=contractId,proto3,oneof" json:"contract_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pack) Reset() {
	*x = Pack{}
	mi := &file_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pack) ProtoMessage() {}

func (x *Pack) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pack.ProtoReflect.Descriptor instead.
func (*Pack) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *Pack) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Pack) GetSequenceId() []byte {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

func (x *Pack) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Pack) GetHead() bool {
	if x != nil {
		return x.Head
	}
	return false
}

func (x *Pack) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Pack) GetNack() bool {
	if x != nil {
		return x.Nack
	}
	return false
}

func (x *Pack) GetContractFrame() *Frame {
	if x != nil {
		return x.ContractFrame
	}
	return nil
}

func (x *Pack) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Pack) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

// used for deep message inspection
type FilteredPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractFrame *Frame                 `protobuf:"bytes,7,opt,name=contract_frame,json=contractFrame,proto3,oneof" json:"contract_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilteredPack) Reset() {
	*x = FilteredPack{}
	mi := &file_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilteredPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredPack) ProtoMessage() {}

func (x *FilteredPack) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredPack.ProtoReflect.Descriptor instead.
func (*FilteredPack) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *FilteredPack) GetContractFrame() *Frame {
	if x != nil {
		return x.ContractFrame
	}
	return nil
}

// ack of a later message means all prior messages have been ackd
type Ack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	MessageId []byte `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// ulid
	SequenceId []byte `protobuf:"bytes,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// all data buffered in the receiver is acked with `selective=true`. When released it is acked with `selective=false`
	Selective bool `protobuf:"varint,3,opt,name=selective,proto3" json:"selective,omitempty"`
	// from the `Pack` this responds to
	Tag           *Tag `protobuf:"bytes,4,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *Ack) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Ack) GetSequenceId() []byte {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

func (x *Ack) GetSelective() bool {
	if x != nil {
		return x.Selective
	}
	return false
}

func (x *Ack) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SendTime      uint64                 `protobuf:"varint,1,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetSendTime() uint64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

// this is a connection local message that is sent at the start of each connection to the control platform
// there is no response. the other side will close the connection if no auth
// no auth can happen if the jwt is not valid, or the client_id is not associated with the jwt
// note that association of the client_id to the jwt uses the api (see openapi spec in the api dir)
type Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the jwt will have the client_id in it
	ByJwt string `protobuf:"bytes,1,opt,name=by_jwt,json=byJwt,proto3" json:"by_jwt,omitempty"`
	// the version of the app, a semver managed by warp
	AppVersion string `protobuf:"bytes,2,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// the pair (client_id, instance_id) represents a single in memory instance
	// this helps the platform distinguish multiple instances from multiple transports of the same instance
	InstanceId    []byte `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *Auth) GetByJwt() string {
	if x != nil {
		return x.ByJwt
	}
	return ""
}

func (x *Auth) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Auth) GetInstanceId() []byte {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type Provide struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keys          []*ProvideKey          `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Provide) Reset() {
	*x = Provide{}
	mi := &file_transfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provide) ProtoMessage() {}

func (x *Provide) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provide.ProtoReflect.Descriptor instead.
func (*Provide) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *Provide) GetKeys() []*ProvideKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ProvideKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Mode  ProvideMode            `protobuf:"varint,1,opt,name=mode,proto3,enum=bringyour.ProvideMode" json:"mode,omitempty"`
	// used to sign the `StoredContract` bytes
	ProvideSecretKey []byte `protobuf:"bytes,2,opt,name=provide_secret_key,json=provideSecretKey,proto3" json:"provide_secret_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProvideKey) Reset() {
	*x = ProvideKey{}
	mi := &file_transfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvideKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideKey) ProtoMessage() {}

func (x *ProvideKey) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideKey.ProtoReflect.Descriptor instead.
func (*ProvideKey) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *ProvideKey) GetMode() ProvideMode {
	if x != nil {
		return x.Mode
	}
	return ProvideMode_None
}

func (x *ProvideKey) GetProvideSecretKey() []byte {
	if x != nil {
		return x.ProvideSecretKey
	}
	return nil
}

// each hop on the stream receives this to configure its state,
// including the first and last hops
// this is sent each time a stream contract is created
type StreamOpen struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	SourceId []byte `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3,oneof" json:"source_id,omitempty"`
	// ulid
	DestinationId []byte `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	// ulid
	StreamId      []byte `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOpen) Reset() {
	*x = StreamOpen{}
	mi := &file_transfer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOpen) ProtoMessage() {}

func (x *StreamOpen) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOpen.ProtoReflect.Descriptor instead.
func (*StreamOpen) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *StreamOpen) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *StreamOpen) GetDestinationId() []byte {
	if x != nil {
		return x.DestinationId
	}
	return nil
}

func (x *StreamOpen) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

// each hop on the stream receives this to configure its state
// this is sent when all open contracts for the stream are closed
type StreamClose struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	StreamId      []byte `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClose) Reset() {
	*x = StreamClose{}
	mi := &file_transfer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClose) ProtoMessage() {}

func (x *StreamClose) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClose.ProtoReflect.Descriptor instead.
func (*StreamClose) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *StreamClose) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

// control message to create a contract
// platform sends a CreateContractResult
type CreateContract struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	DestinationId     []byte `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	TransferByteCount uint64 `protobuf:"varint,2,opt,name=transfer_byte_count,json=transferByteCount,proto3" json:"transfer_byte_count,omitempty"`
	// restrict the contract to a companion of an existing open contract
	Companion bool `protobuf:"varint,3,opt,name=companion,proto3" json:"companion,omitempty"`
	// ulids
	UsedContractIds [][]byte `protobuf:"bytes,4,rep,name=used_contract_ids,json=usedContractIds,proto3" json:"used_contract_ids,omitempty"`
	// ulids
	IntermediaryIds [][]byte `protobuf:"bytes,5,rep,name=intermediary_ids,json=intermediaryIds,proto3" json:"intermediary_ids,omitempty"`
	// ulid
	StreamId []byte `protobuf:"bytes,6,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	// stream will be used when intermediary_ids or stream_id is set
	// in the case of wanting to use streams with no intermediaries, set `force_stream=true`
	ForceStream   *bool `protobuf:"varint,7,opt,name=force_stream,json=forceStream,proto3,oneof" json:"force_stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContract) Reset() {
	*x = CreateContract{}
	mi := &file_transfer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContract) ProtoMessage() {}

func (x *CreateContract) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContract.ProtoReflect.Descriptor instead.
func (*CreateContract) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *CreateContract) GetDestinationId() []byte {
	if x != nil {
		return x.DestinationId
	}
	return nil
}

func (x *CreateContract) GetTransferByteCount() uint64 {
	if x != nil {
		return x.TransferByteCount
	}
	return 0
}

func (x *CreateContract) GetCompanion() bool {
	if x != nil {
		return x.Companion
	}
	return false
}

func (x *CreateContract) GetUsedContractIds() [][]byte {
	if x != nil {
		return x.UsedContractIds
	}
	return nil
}

func (x *CreateContract) GetIntermediaryIds() [][]byte {
	if x != nil {
		return x.IntermediaryIds
	}
	return nil
}

func (x *CreateContract) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *CreateContract) GetForceStream() bool {
	if x != nil && x.ForceStream != nil {
		return *x.ForceStream
	}
	return false
}

type CreateContractResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *ContractError         `protobuf:"varint,1,opt,name=error,proto3,enum=bringyour.ContractError,oneof" json:"error,omitempty"`
	// the public contract to share with the transfer destination
	// note this may contain a `stream_id` which directs the client to switch to a stream
	Contract *Contract `protobuf:"bytes,2,opt,name=contract,proto3,oneof" json:"contract,omitempty"`
	// echo the `CreateContract` to allow associating the result with the request
	CreateContract *CreateContract `protobuf:"bytes,3,opt,name=create_contract,json=createContract,proto3,oneof" json:"create_contract,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateContractResult) Reset() {
	*x = CreateContractResult{}
	mi := &file_transfer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContractResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractResult) ProtoMessage() {}

func (x *CreateContractResult) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractResult.ProtoReflect.Descriptor instead.
func (*CreateContractResult) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *CreateContractResult) GetError() ContractError {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ContractError_NoPermission
}

func (x *CreateContractResult) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *CreateContractResult) GetCreateContract() *CreateContract {
	if x != nil {
		return x.CreateContract
	}
	return nil
}

// append this message inline a pack to enable the connection
type Contract struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	StoredContractBytes []byte `protobuf:"bytes,1,opt,name=stored_contract_bytes,json=storedContractBytes,proto3" json:"stored_contract_bytes,omitempty"`
	// `stored_contract_bytes` signed with the `provider_secret_key`
	StoredContractHmac []byte `protobuf:"bytes,2,opt,name=stored_contract_hmac,json=storedContractHmac,proto3" json:"stored_contract_hmac,omitempty"`
	// the client must always verify the provide mode by matching the `provider_secret_key` for that mode to the hmac
	ProvideMode   ProvideMode `protobuf:"varint,3,opt,name=provide_mode,json=provideMode,proto3,enum=bringyour.ProvideMode" json:"provide_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contract) Reset() {
	*x = Contract{}
	mi := &file_transfer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{15}
}

func (x *Contract) GetStoredContractBytes() []byte {
	if x != nil {
		return x.StoredContractBytes
	}
	return nil
}

func (x *Contract) GetStoredContractHmac() []byte {
	if x != nil {
		return x.StoredContractHmac
	}
	return nil
}

func (x *Contract) GetProvideMode() ProvideMode {
	if x != nil {
		return x.ProvideMode
	}
	return ProvideMode_None
}

// stream_id replaces the source_id and destination_id
type StoredContract struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ContractId        []byte                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	TransferByteCount uint64                 `protobuf:"varint,2,opt,name=transfer_byte_count,json=transferByteCount,proto3" json:"transfer_byte_count,omitempty"`
	// ulid
	SourceId []byte `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3,oneof" json:"source_id,omitempty"`
	// ulid
	DestinationId []byte `protobuf:"bytes,4,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	// ulid
	StreamId []byte `protobuf:"bytes,5,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	// relative priority
	// 0 (missing) is least priority
	// any positive priority value is 100% more than 0
	// generally only positive priority data will matter for the community payouts,
	// and priority will scale the payout amount,
	// so it is in a provider's interest to prioritize data with positive priority
	Priority      *uint32 `protobuf:"varint,6,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoredContract) Reset() {
	*x = StoredContract{}
	mi := &file_transfer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredContract) ProtoMessage() {}

func (x *StoredContract) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredContract.ProtoReflect.Descriptor instead.
func (*StoredContract) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{16}
}

func (x *StoredContract) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *StoredContract) GetTransferByteCount() uint64 {
	if x != nil {
		return x.TransferByteCount
	}
	return 0
}

func (x *StoredContract) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *StoredContract) GetDestinationId() []byte {
	if x != nil {
		return x.DestinationId
	}
	return nil
}

func (x *StoredContract) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *StoredContract) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

// control message
type CloseContract struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContractId       []byte                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AckedByteCount   uint64                 `protobuf:"varint,2,opt,name=acked_byte_count,json=ackedByteCount,proto3" json:"acked_byte_count,omitempty"`
	UnackedByteCount uint64                 `protobuf:"varint,3,opt,name=unacked_byte_count,json=unackedByteCount,proto3" json:"unacked_byte_count,omitempty"`
	Checkpoint       bool                   `protobuf:"varint,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CloseContract) Reset() {
	*x = CloseContract{}
	mi := &file_transfer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseContract) ProtoMessage() {}

func (x *CloseContract) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseContract.ProtoReflect.Descriptor instead.
func (*CloseContract) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{17}
}

func (x *CloseContract) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *CloseContract) GetAckedByteCount() uint64 {
	if x != nil {
		return x.AckedByteCount
	}
	return 0
}

func (x *CloseContract) GetUnackedByteCount() uint64 {
	if x != nil {
		return x.UnackedByteCount
	}
	return 0
}

func (x *CloseContract) GetCheckpoint() bool {
	if x != nil {
		return x.Checkpoint
	}
	return false
}

// peer auditing
// the acl will block contracts between between two parties with bad audits of each other
type PeerAudit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ulid
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// number of seconds in the audit
	Duration            uint64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Abuse               bool   `protobuf:"varint,3,opt,name=abuse,proto3" json:"abuse,omitempty"`
	BadContractCount    uint64 `protobuf:"varint,4,opt,name=bad_contract_count,json=badContractCount,proto3" json:"bad_contract_count,omitempty"`
	DiscardedByteCount  uint64 `protobuf:"varint,5,opt,name=discarded_byte_count,json=discardedByteCount,proto3" json:"discarded_byte_count,omitempty"`
	DiscardedCount      uint64 `protobuf:"varint,6,opt,name=discarded_count,json=discardedCount,proto3" json:"discarded_count,omitempty"`
	BadMessageByteCount uint64 `protobuf:"varint,7,opt,name=bad_message_byte_count,json=badMessageByteCount,proto3" json:"bad_message_byte_count,omitempty"`
	BadMessageCount     uint64 `protobuf:"varint,8,opt,name=bad_message_count,json=badMessageCount,proto3" json:"bad_message_count,omitempty"`
	SendByteCount       uint64 `protobuf:"varint,9,opt,name=send_byte_count,json=sendByteCount,proto3" json:"send_byte_count,omitempty"`
	SendCount           uint64 `protobuf:"varint,10,opt,name=send_count,json=sendCount,proto3" json:"send_count,omitempty"`
	ResendByteCount     uint64 `protobuf:"varint,11,opt,name=resend_byte_count,json=resendByteCount,proto3" json:"resend_byte_count,omitempty"`
	ResendCount         uint64 `protobuf:"varint,12,opt,name=resend_count,json=resendCount,proto3" json:"resend_count,omitempty"`
	// ulid
	StreamId      []byte `protobuf:"bytes,13,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerAudit) Reset() {
	*x = PeerAudit{}
	mi := &file_transfer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAudit) ProtoMessage() {}

func (x *PeerAudit) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAudit.ProtoReflect.Descriptor instead.
func (*PeerAudit) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{18}
}

func (x *PeerAudit) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeerAudit) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PeerAudit) GetAbuse() bool {
	if x != nil {
		return x.Abuse
	}
	return false
}

func (x *PeerAudit) GetBadContractCount() uint64 {
	if x != nil {
		return x.BadContractCount
	}
	return 0
}

func (x *PeerAudit) GetDiscardedByteCount() uint64 {
	if x != nil {
		return x.DiscardedByteCount
	}
	return 0
}

func (x *PeerAudit) GetDiscardedCount() uint64 {
	if x != nil {
		return x.DiscardedCount
	}
	return 0
}

func (x *PeerAudit) GetBadMessageByteCount() uint64 {
	if x != nil {
		return x.BadMessageByteCount
	}
	return 0
}

func (x *PeerAudit) GetBadMessageCount() uint64 {
	if x != nil {
		return x.BadMessageCount
	}
	return 0
}

func (x *PeerAudit) GetSendByteCount() uint64 {
	if x != nil {
		return x.SendByteCount
	}
	return 0
}

func (x *PeerAudit) GetSendCount() uint64 {
	if x != nil {
		return x.SendCount
	}
	return 0
}

func (x *PeerAudit) GetResendByteCount() uint64 {
	if x != nil {
		return x.ResendByteCount
	}
	return 0
}

func (x *PeerAudit) GetResendCount() uint64 {
	if x != nil {
		return x.ResendCount
	}
	return 0
}

func (x *PeerAudit) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type ControlPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlPing) Reset() {
	*x = ControlPing{}
	mi := &file_transfer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPing) ProtoMessage() {}

func (x *ControlPing) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPing.ProtoReflect.Descriptor instead.
func (*ControlPing) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{19}
}

type ProvidePing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvidePing) Reset() {
	*x = ProvidePing{}
	mi := &file_transfer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvidePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvidePing) ProtoMessage() {}

func (x *ProvidePing) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvidePing.ProtoReflect.Descriptor instead.
func (*ProvidePing) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{20}
}

var File_transfer_proto protoreflect.FileDescriptor

const file_transfer_proto_rawDesc = "" +
	"\n" +
	"\x0etransfer.proto\x12\tbringyour\x1a\vframe.proto\"\xad\x01\n" +
	"\fTransferPath\x12 \n" +
	"\tsource_id\x18\x02 \x01(\fH\x00R\bsourceId\x88\x01\x01\x12*\n" +
	"\x0edestination_id\x18\x01 \x01(\fH\x01R\rdestinationId\x88\x01\x01\x12 \n" +
	"\tstream_id\x18\x03 \x01(\fH\x02R\bstreamId\x88\x01\x01B\f\n" +
	"\n" +
	"_source_idB\x11\n" +
	"\x0f_destination_idB\f\n" +
	"\n" +
	"_stream_id\"\xb7\x02\n" +
	"\rTransferFrame\x12<\n" +
	"\rtransfer_path\x18\x01 \x01(\v2\x17.bringyour.TransferPathR\ftransferPath\x12+\n" +
	"\x05frame\x18\x02 \x01(\v2\x10.bringyour.FrameH\x00R\x05frame\x88\x01\x01\x12>\n" +
	"\fmessage_type\x18\x03 \x01(\x0e2\x16.bringyour.MessageTypeH\x01R\vmessageType\x88\x01\x01\x12(\n" +
	"\x04pack\x18\x04 \x01(\v2\x0f.bringyour.PackH\x02R\x04pack\x88\x01\x01\x12%\n" +
	"\x03ack\x18\x05 \x01(\v2\x0e.bringyour.AckH\x03R\x03ack\x88\x01\x01B\b\n" +
	"\x06_frameB\x0f\n" +
	"\r_message_typeB\a\n" +
	"\x05_packB\x06\n" +
	"\x04_ack\"U\n" +
	"\x15FilteredTransferFrame\x12<\n" +
	"\rtransfer_path\x18\x01 \x01(\v2\x17.bringyour.TransferPathR\ftransferPath\"\xee\x01\n" +
	"\x1eFilteredTransferFrameWithFrame\x12<\n" +
	"\rtransfer_path\x18\x01 \x01(\v2\x17.bringyour.TransferPathR\ftransferPath\x123\n" +
	"\x05frame\x18\x02 \x01(\v2\x18.bringyour.FilteredFrameH\x00R\x05frame\x88\x01\x01\x12>\n" +
	"\fmessage_type\x18\x03 \x01(\x0e2\x16.bringyour.MessageTypeH\x01R\vmessageType\x88\x01\x01B\b\n" +
	"\x06_frameB\x0f\n" +
	"\r_message_type\"\xf7\x02\n" +
	"\x04Pack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x1f\n" +
	"\vsequence_id\x18\x02 \x01(\fR\n" +
	"sequenceId\x12'\n" +
	"\x0fsequence_number\x18\x03 \x01(\x04R\x0esequenceNumber\x12\x12\n" +
	"\x04head\x18\x04 \x01(\bR\x04head\x12(\n" +
	"\x06frames\x18\x05 \x03(\v2\x10.bringyour.FrameR\x06frames\x12\x12\n" +
	"\x04nack\x18\x06 \x01(\bR\x04nack\x12<\n" +
	"\x0econtract_frame\x18\a \x01(\v2\x10.bringyour.FrameH\x00R\rcontractFrame\x88\x01\x01\x12%\n" +
	"\x03tag\x18\b \x01(\v2\x0e.bringyour.TagH\x01R\x03tag\x88\x01\x01\x12$\n" +
	"\vcontract_id\x18\t \x01(\fH\x02R\n" +
	"contractId\x88\x01\x01B\x11\n" +
	"\x0f_contract_frameB\x06\n" +
	"\x04_tagB\x0e\n" +
	"\f_contract_id\"_\n" +
	"\fFilteredPack\x12<\n" +
	"\x0econtract_frame\x18\a \x01(\v2\x10.bringyour.FrameH\x00R\rcontractFrame\x88\x01\x01B\x11\n" +
	"\x0f_contract_frame\"\x92\x01\n" +
	"\x03Ack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x1f\n" +
	"\vsequence_id\x18\x02 \x01(\fR\n" +
	"sequenceId\x12\x1c\n" +
	"\tselective\x18\x03 \x01(\bR\tselective\x12%\n" +
	"\x03tag\x18\x04 \x01(\v2\x0e.bringyour.TagH\x00R\x03tag\x88\x01\x01B\x06\n" +
	"\x04_tag\"\"\n" +
	"\x03Tag\x12\x1b\n" +
	"\tsend_time\x18\x01 \x01(\x04R\bsendTime\"_\n" +
	"\x04Auth\x12\x15\n" +
	"\x06by_jwt\x18\x01 \x01(\tR\x05byJwt\x12\x1f\n" +
	"\vapp_version\x18\x02 \x01(\tR\n" +
	"appVersion\x12\x1f\n" +
	"\vinstance_id\x18\x03 \x01(\fR\n" +
	"instanceId\"4\n" +
	"\aProvide\x12)\n" +
	"\x04keys\x18\x01 \x03(\v2\x15.bringyour.ProvideKeyR\x04keys\"f\n" +
	"\n" +
	"ProvideKey\x12*\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x16.bringyour.ProvideModeR\x04mode\x12,\n" +
	"\x12provide_secret_key\x18\x02 \x01(\fR\x10provideSecretKey\"\x98\x01\n" +
	"\n" +
	"StreamOpen\x12 \n" +
	"\tsource_id\x18\x02 \x01(\fH\x00R\bsourceId\x88\x01\x01\x12*\n" +
	"\x0edestination_id\x18\x01 \x01(\fH\x01R\rdestinationId\x88\x01\x01\x12\x1b\n" +
	"\tstream_id\x18\x03 \x01(\fR\bstreamIdB\f\n" +
	"\n" +
	"_source_idB\x11\n" +
	"\x0f_destination_id\"*\n" +
	"\vStreamClose\x12\x1b\n" +
	"\tstream_id\x18\x03 \x01(\fR\bstreamId\"\xdd\x02\n" +
	"\x0eCreateContract\x12*\n" +
	"\x0edestination_id\x18\x01 \x01(\fH\x00R\rdestinationId\x88\x01\x01\x12.\n" +
	"\x13transfer_byte_count\x18\x02 \x01(\x04R\x11transferByteCount\x12\x1c\n" +
	"\tcompanion\x18\x03 \x01(\bR\tcompanion\x12*\n" +
	"\x11used_contract_ids\x18\x04 \x03(\fR\x0fusedContractIds\x12)\n" +
	"\x10intermediary_ids\x18\x05 \x03(\fR\x0fintermediaryIds\x12 \n" +
	"\tstream_id\x18\x06 \x01(\fH\x01R\bstreamId\x88\x01\x01\x12&\n" +
	"\fforce_stream\x18\a \x01(\bH\x02R\vforceStream\x88\x01\x01B\x11\n" +
	"\x0f_destination_idB\f\n" +
	"\n" +
	"_stream_idB\x0f\n" +
	"\r_force_stream\"\xf5\x01\n" +
	"\x14CreateContractResult\x123\n" +
	"\x05error\x18\x01 \x01(\x0e2\x18.bringyour.ContractErrorH\x00R\x05error\x88\x01\x01\x124\n" +
	"\bcontract\x18\x02 \x01(\v2\x13.bringyour.ContractH\x01R\bcontract\x88\x01\x01\x12G\n" +
	"\x0fcreate_contract\x18\x03 \x01(\v2\x19.bringyour.CreateContractH\x02R\x0ecreateContract\x88\x01\x01B\b\n" +
	"\x06_errorB\v\n" +
	"\t_contractB\x12\n" +
	"\x10_create_contract\"\xab\x01\n" +
	"\bContract\x122\n" +
	"\x15stored_contract_bytes\x18\x01 \x01(\fR\x13storedContractBytes\x120\n" +
	"\x14stored_contract_hmac\x18\x02 \x01(\fR\x12storedContractHmac\x129\n" +
	"\fprovide_mode\x18\x03 \x01(\x0e2\x16.bringyour.ProvideModeR\vprovideMode\"\xae\x02\n" +
	"\x0eStoredContract\x12\x1f\n" +
	"\vcontract_id\x18\x01 \x01(\fR\n" +
	"contractId\x12.\n" +
	"\x13transfer_byte_count\x18\x02 \x01(\x04R\x11transferByteCount\x12 \n" +
	"\tsource_id\x18\x03 \x01(\fH\x00R\bsourceId\x88\x01\x01\x12*\n" +
	"\x0edestination_id\x18\x04 \x01(\fH\x01R\rdestinationId\x88\x01\x01\x12 \n" +
	"\tstream_id\x18\x05 \x01(\fH\x02R\bstreamId\x88\x01\x01\x12\x1f\n" +
	"\bpriority\x18\x06 \x01(\rH\x03R\bpriority\x88\x01\x01B\f\n" +
	"\n" +
	"_source_idB\x11\n" +
	"\x0f_destination_idB\f\n" +
	"\n" +
	"_stream_idB\v\n" +
	"\t_priority\"\xa8\x01\n" +
	"\rCloseContract\x12\x1f\n" +
	"\vcontract_id\x18\x01 \x01(\fR\n" +
	"contractId\x12(\n" +
	"\x10acked_byte_count\x18\x02 \x01(\x04R\x0eackedByteCount\x12,\n" +
	"\x12unacked_byte_count\x18\x03 \x01(\x04R\x10unackedByteCount\x12\x1e\n" +
	"\n" +
	"checkpoint\x18\x04 \x01(\bR\n" +
	"checkpoint\"\xf3\x03\n" +
	"\tPeerAudit\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\fR\x06peerId\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\x04R\bduration\x12\x14\n" +
	"\x05abuse\x18\x03 \x01(\bR\x05abuse\x12,\n" +
	"\x12bad_contract_count\x18\x04 \x01(\x04R\x10badContractCount\x120\n" +
	"\x14discarded_byte_count\x18\x05 \x01(\x04R\x12discardedByteCount\x12'\n" +
	"\x0fdiscarded_count\x18\x06 \x01(\x04R\x0ediscardedCount\x123\n" +
	"\x16bad_message_byte_count\x18\a \x01(\x04R\x13badMessageByteCount\x12*\n" +
	"\x11bad_message_count\x18\b \x01(\x04R\x0fbadMessageCount\x12&\n" +
	"\x0fsend_byte_count\x18\t \x01(\x04R\rsendByteCount\x12\x1d\n" +
	"\n" +
	"send_count\x18\n" +
	" \x01(\x04R\tsendCount\x12*\n" +
	"\x11resend_byte_count\x18\v \x01(\x04R\x0fresendByteCount\x12!\n" +
	"\fresend_count\x18\f \x01(\x04R\vresendCount\x12\x1b\n" +
	"\tstream_id\x18\r \x01(\fR\bstreamId\"\r\n" +
	"\vControlPing\"\r\n" +
	"\vProvidePing*d\n" +
	"\vProvideMode\x12\b\n" +
	"\x04None\x10\x00\x12\v\n" +
	"\aNetwork\x10\x01\x12\x14\n" +
	"\x10FriendsAndFamily\x10\x02\x12\n" +
	"\n" +
	"\x06Public\x10\x03\x12\n" +
	"\n" +
	"\x06Stream\x10\x04\x12\x10\n" +
	"\fPublicStream\x10\x05*]\n" +
	"\rContractError\x12\x10\n" +
	"\fNoPermission\x10\x00\x12\x17\n" +
	"\x13InsufficientBalance\x10\x01\x12\t\n" +
	"\x05Setup\x10\x02\x12\t\n" +
	"\x05Trust\x10\x03\x12\v\n" +
	"\aInvalid\x10\x04B'Z%github.com/urnetwork/connect/protocolb\x06proto3"

var (
	file_transfer_proto_rawDescOnce sync.Once
	file_transfer_proto_rawDescData []byte
)

func file_transfer_proto_rawDescGZIP() []byte {
	file_transfer_proto_rawDescOnce.Do(func() {
		file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transfer_proto_rawDesc), len(file_transfer_proto_rawDesc)))
	})
	return file_transfer_proto_rawDescData
}

var file_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_transfer_proto_goTypes = []any{
	(ProvideMode)(0),                       // 0: bringyour.ProvideMode
	(ContractError)(0),                     // 1: bringyour.ContractError
	(*TransferPath)(nil),                   // 2: bringyour.TransferPath
	(*TransferFrame)(nil),                  // 3: bringyour.TransferFrame
	(*FilteredTransferFrame)(nil),          // 4: bringyour.FilteredTransferFrame
	(*FilteredTransferFrameWithFrame)(nil), // 5: bringyour.FilteredTransferFrameWithFrame
	(*Pack)(nil),                           // 6: bringyour.Pack
	(*FilteredPack)(nil),                   // 7: bringyour.FilteredPack
	(*Ack)(nil),                            // 8: bringyour.Ack
	(*Tag)(nil),                            // 9: bringyour.Tag
	(*Auth)(nil),                           // 10: bringyour.Auth
	(*Provide)(nil),                        // 11: bringyour.Provide
	(*ProvideKey)(nil),                     // 12: bringyour.ProvideKey
	(*StreamOpen)(nil),                     // 13: bringyour.StreamOpen
	(*StreamClose)(nil),                    // 14: bringyour.StreamClose
	(*CreateContract)(nil),                 // 15: bringyour.CreateContract
	(*CreateContractResult)(nil),           // 16: bringyour.CreateContractResult
	(*Contract)(nil),                       // 17: bringyour.Contract
	(*StoredContract)(nil),                 // 18: bringyour.StoredContract
	(*CloseContract)(nil),                  // 19: bringyour.CloseContract
	(*PeerAudit)(nil),                      // 20: bringyour.PeerAudit
	(*ControlPing)(nil),                    // 21: bringyour.ControlPing
	(*ProvidePing)(nil),                    // 22: bringyour.ProvidePing
	(*Frame)(nil),                          // 23: bringyour.Frame
	(MessageType)(0),                       // 24: bringyour.MessageType
	(*FilteredFrame)(nil),                  // 25: bringyour.FilteredFrame
}
var file_transfer_proto_depIdxs = []int32{
	2,  // 0: bringyour.TransferFrame.transfer_path:type_name -> bringyour.TransferPath
	23, // 1: bringyour.TransferFrame.frame:type_name -> bringyour.Frame
	24, // 2: bringyour.TransferFrame.message_type:type_name -> bringyour.MessageType
	6,  // 3: bringyour.TransferFrame.pack:type_name -> bringyour.Pack
	8,  // 4: bringyour.TransferFrame.ack:type_name -> bringyour.Ack
	2,  // 5: bringyour.FilteredTransferFrame.transfer_path:type_name -> bringyour.TransferPath
	2,  // 6: bringyour.FilteredTransferFrameWithFrame.transfer_path:type_name -> bringyour.TransferPath
	25, // 7: bringyour.FilteredTransferFrameWithFrame.frame:type_name -> bringyour.FilteredFrame
	24, // 8: bringyour.FilteredTransferFrameWithFrame.message_type:type_name -> bringyour.MessageType
	23, // 9: bringyour.Pack.frames:type_name -> bringyour.Frame
	23, // 10: bringyour.Pack.contract_frame:type_name -> bringyour.Frame
	9,  // 11: bringyour.Pack.tag:type_name -> bringyour.Tag
	23, // 12: bringyour.FilteredPack.contract_frame:type_name -> bringyour.Frame
	9,  // 13: bringyour.Ack.tag:type_name -> bringyour.Tag
	12, // 14: bringyour.Provide.keys:type_name -> bringyour.ProvideKey
	0,  // 15: bringyour.ProvideKey.mode:type_name -> bringyour.ProvideMode
	1,  // 16: bringyour.CreateContractResult.error:type_name -> bringyour.ContractError
	17, // 17: bringyour.CreateContractResult.contract:type_name -> bringyour.Contract
	15, // 18: bringyour.CreateContractResult.create_contract:type_name -> bringyour.CreateContract
	0,  // 19: bringyour.Contract.provide_mode:type_name -> bringyour.ProvideMode
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_transfer_proto_init() }
func file_transfer_proto_init() {
	if File_transfer_proto != nil {
		return
	}
	file_frame_proto_init()
	file_transfer_proto_msgTypes[0].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[1].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[3].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[4].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[5].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[6].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[11].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[13].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[14].OneofWrappers = []any{}
	file_transfer_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transfer_proto_rawDesc), len(file_transfer_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transfer_proto_goTypes,
		DependencyIndexes: file_transfer_proto_depIdxs,
		EnumInfos:         file_transfer_proto_enumTypes,
		MessageInfos:      file_transfer_proto_msgTypes,
	}.Build()
	File_transfer_proto = out.File
	file_transfer_proto_goTypes = nil
	file_transfer_proto_depIdxs = nil
}
